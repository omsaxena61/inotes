const express = require("express");
const router = express.Router();
const User = require("../models/User");
const bcrypt = require("bcrypt");
const { body, validationResult } = require("express-validator");
var jwt = require("jsonwebtoken");
const JWT_SECRET = "bhupendra jogi";
var fetchuser = require("../middleware/fetchuser");

//ROUTE1 //create a user using :POST "/api/auth/createUser". no login required
router.post(
  "/createuser",
  [
    body("name", "name must be atleast 3 letters").isLength({ min: 5 }),
    body("email", "email must be  unique").isEmail(),
    body(
      "password",
      "password must be contain @ and other special char"
    ).isLength({ min: 5 }),
  ],
  async (req, res) => {
    let success=false;
    // if there are errors return bad and errorsrequest
    const errors = validationResult(req);
    console.log(!errors.isEmpty());
    if (!errors.isEmpty()) {
      return res.status(400).json({ errors: errors.array() });
    }
    // his code snippet is creating a new user record in a database using data provided in the request body. It then responds with the created user object in JSON format.
    // check whether user with same email exist

    try {
      let user = await User.findOne({ email: req.body.email });
      if (user) {
        return res
          .status(400)
          .json({ error: "sorry with this emailid user already exist" });
      }
      // this method will create a salt which will add to password made by user then hash of combining both pass +salt will be store to db in hash form bcrypt.genSalt(10) is a function call from the bcrypt library in JavaScript. It is used to generate a salt, which is a random string of characters that is used in the process of hashing passwords.
      const salt = await bcrypt.genSalt(10);
      //  The function bcrypt.hash(req.body.password, salt) is a call to the hash function provided by the bcrypt library in JavaScript. It is used to securely hash a password using a generated salt.
      secpass = await bcrypt.hash(req.body.password, salt);
      //create a new user
      user = await User.create({
        name: req.body.name,
        password: secpass,
        email: req.body.email,
      });
      // .then((user) => res.json(user)).catch(err=>{console.log(err)
      // res.json({error:'please enter a unique value for mail',message:err.message})})

      const data = {
        user: {
          id: user.id,
        },
      };

      // The jwt.sign function is typically used in conjunction with JSON Web Tokens (JWTs) to generate a token The resulting JWT token will look something like this (although the actual value will vary as it is generated based on the provided information)The resulting JWT token generated by the jwt.sign function is encoded in Base64Url format.
      const authtoken = jwt.sign(data, JWT_SECRET);
      res.json(authtoken);
      console.log(authtoken);
    } catch (error) {
      console.error(error.message);
      res.status(500).send("some error occured");
    }
  }
);

//ROUTE2 // authenticate a user using :POST "/api/auth/login". no login required
router.post(
  "/login",
  [
    body("email", "email must be  unique").isEmail(),
    body(
      "password",
      "password must be contain @ and other special char and not be blank"
    ).exists(),
  ],
  async (req, res) => {
    // if there are errors return bad request and errors
    const errors = validationResult(req);
    console.log(!errors.isEmpty());
    if (!errors.isEmpty()) {
      return res.status(400).json({ errors: errors.array() });
    }

    const { email, password } = req.body;
    try {
      let user = await User.findOne({ email });
      if (!user) {
        success=false;
        return res.status(400).json({ error: "wrong credentials" });
      }
      const passWCompare = await bcrypt.compare(password, user.password);
      if (!passWCompare) {
        success=false;
        return res.status(400).json({success, error: "wrong credentials" });
      }
      const data = {
        user: {
          id: user.id,
        },
      };
      
      const authtoken = jwt.sign(data, JWT_SECRET);
      success=true;
      res.json({success,authtoken});
    } catch (error) {
      console.error(error.message);
      res.status(500).send("some error occured");
    }
  }
);
// ROUTE 3:get loged in user details using post "/api/auth/getuser" login required
router.post("/getuser", fetchuser, async (req, res) => {
  try {
    userId = req.user.id;
    const user = await User.findById(userId).select("-password");
    res.send(user);
  } catch (error) {
    res.send(error.message);
  }
});
module.exports = router;
